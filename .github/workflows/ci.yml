name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Generate Prisma Client
        run: npx prisma generate --schema=apps/lc_api/api-server/prisma/schema.prisma
      
      - name: Type check
        run: pnpm type-check
      
      - name: Lint
        run: pnpm lint
      
      - name: Build
        run: pnpm build
        env:
          # Provide dummy env vars for build
          NEXT_PUBLIC_API_BASE_URL: http://localhost:4000
          NEXT_PUBLIC_APP_ENV: development
      
      - name: Run tests
        run: pnpm test
        continue-on-error: true
  
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        service: [api, web-portal, web-admin]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image - ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.service == 'api' && 'lc_api' || 'lc_apps' }}/${{ matrix.service == 'api' && '' || matrix.service }}/Dockerfile
          push: false
          tags: evs-lc-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
