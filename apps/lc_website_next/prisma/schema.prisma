// Prisma Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -------------------------------
// User Management
// -------------------------------
model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  role         String    @default("user")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  sessions            Session[]
  oauthAccounts       OAuthAccount[]
  mfaTotp             MfaTotp?
  mfaBackupCodes      MfaBackupCode[]
  passwordResetTokens PasswordResetToken[]
  gameAccountLinks    GameAccountLink[]
  auditLogs           AuditLog[]           @relation("ActorUser")
  orders              Order[]
  votes               Vote[]
  posts               Post[]

  @@index([email])
  @@map("users")
}

// Session Management (Auth.js compatible)
model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// OAuth Integration
model OAuthAccount {
  id                String    @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  accessToken       String?   @db.Text
  refreshToken      String?   @db.Text
  expiresAt         DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("oauth_accounts")
}

// MFA TOTP
model MfaTotp {
  id              String    @id @default(uuid())
  userId          String    @unique
  secretEncrypted String
  enabledAt       DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mfa_totp")
}

// MFA Backup Codes
model MfaBackupCode {
  id       String    @id @default(uuid())
  userId   String
  codeHash String
  usedAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("mfa_backup_codes")
}

// Password Reset Tokens
model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("password_reset_tokens")
}

// -------------------------------
// Game Server Configuration
// -------------------------------
model GameServer {
  id               String   @id @default(uuid())
  name             String
  region           String?
  driver           String   @default("mysql")
  host             String
  port             Int      @default(3306)
  database         String
  roUser           String
  roPassEncrypted  String
  createdAt        DateTime @default(now())

  gameAccountLinks GameAccountLink[]

  @@map("game_servers")
}

// Game Account Links (Portal User -> Legacy Game Account)
model GameAccountLink {
  id           String    @id @default(uuid())
  userId       String
  serverId     String
  gameUsername String
  verifiedAt   DateTime?
  legacyAlgo   String?
  lastCheckAt  DateTime?

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  server GameServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([serverId, gameUsername])
  @@index([userId])
  @@map("game_account_links")
}

// -------------------------------
// Audit Log
// -------------------------------
model AuditLog {
  id          String   @id @default(uuid())
  actorUserId String?
  action      String
  target      String
  metaJson    String?  @db.Text
  createdAt   DateTime @default(now())

  actor User? @relation("ActorUser", fields: [actorUserId], references: [id], onDelete: SetNull)

  @@index([actorUserId])
  @@index([createdAt])
  @@map("audit_logs")
}

// -------------------------------
// Shop & Payments (Phase 4)
// -------------------------------
model Product {
  id          String      @id @default(cuid())
  name        String
  description String      @db.Text
  price       Decimal     @db.Decimal(10, 2)
  category    String
  imageUrl    String?
  stock       Int         @default(0)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@index([category])
  @@index([active])
  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  totalAmount     Decimal     @db.Decimal(10, 2)
  status          String      @default("pending") // pending, paid, delivered, refunded, failed
  paypalOrderId   String?     @unique
  paypalPaymentId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// -------------------------------
// News & Voting (Phase 6)
// -------------------------------
model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String    @db.Text
  excerpt     String?   @db.Text
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
  @@index([published])
  @@index([publishedAt])
  @@map("posts")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  site      String
  votedAt   DateTime @default(now())
  rewarded  Boolean  @default(false)
  ipAddress String?
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([votedAt])
  @@map("votes")
}